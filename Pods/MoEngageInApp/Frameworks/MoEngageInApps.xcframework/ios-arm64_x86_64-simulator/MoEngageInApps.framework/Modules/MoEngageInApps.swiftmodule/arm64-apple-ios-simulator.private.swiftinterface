// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MoEngageInApps
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import MoEngageCore
@_exported import MoEngageInApps
import Swift
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc public class MoEngageInAppMigration : ObjectiveC.NSObject {
  @objc public static func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public static func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public static func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MoEngageInAppSelfHandledCampaign : MoEngageInApps.MoEngageInAppCampaign {
  @objc final public let campaignContent: Swift.String
  @objc final public let autoDismissInterval: Swift.Int
  @objc public init(campaignContent: Swift.String, autoDismissInterval: Swift.Int, campaign_id: Swift.String, campaign_name: Swift.String, expiry_time: Foundation.NSDate, isDraft: Swift.Bool, campaignContext: [Swift.String : Any])
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageInAppFileStorageHandler : ObjectiveC.NSObject {
  @objc public func migrateInAppsData(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func saveNoNEncryptedInAppData(data: MoEngageInApps.MoEngageInAppCampaignsData, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func fetchInAppData(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageInApps.MoEngageInAppCampaignsData
  @objc public func saveInAppData(data: MoEngageInApps.MoEngageInAppCampaignsData, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func migrateInAppStatData(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func fetchInAppStatData(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageInApps.MoEngageInAppStatData
  @objc public func saveInAppStatData(data: MoEngageInApps.MoEngageInAppStatData, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol MoEngageInAppNativeDelegate : ObjectiveC.NSObjectProtocol {
  @objc func inAppShown(withCampaignInfo inappCampaign: MoEngageInApps.MoEngageInAppCampaign, forAccountMeta accountMeta: MoEngageCore.MoEngageAccountMeta)
  @objc func inAppClicked(withCampaignInfo inappCampaign: MoEngageInApps.MoEngageInAppCampaign, andNavigationActionInfo navigationAction: MoEngageInApps.MoEngageInAppAction, forAccountMeta accountMeta: MoEngageCore.MoEngageAccountMeta)
  @objc func inAppClicked(withCampaignInfo inappCampaign: MoEngageInApps.MoEngageInAppCampaign, andCustomActionInfo customAction: MoEngageInApps.MoEngageInAppAction, forAccountMeta accountMeta: MoEngageCore.MoEngageAccountMeta)
  @objc func inAppDismissed(withCampaignInfo inappCampaign: MoEngageInApps.MoEngageInAppCampaign, forAccountMeta accountMeta: MoEngageCore.MoEngageAccountMeta)
  @objc func selfHandledInAppTriggered(withInfo inappCampaign: MoEngageInApps.MoEngageInAppSelfHandledCampaign, forAccountMeta accountMeta: MoEngageCore.MoEngageAccountMeta)
}
@objc public class MoEngageInAppAction : MoEngageInApps.MoEngageModelObject {
  @objc final public let actionType: MoEngageInApps.MoEngageInAppActionType
  @objc final public let screenName: Swift.String?
  @objc final public let keyValuePairs: [Swift.String : Any]
  @objc public init(actionType: MoEngageInApps.MoEngageInAppActionType, screenName: Swift.String?, keyValuePairs: [Swift.String : Any])
  @objc convenience public init(actionType: MoEngageInApps.MoEngageInAppActionType, keyValuePairs: [Swift.String : Any])
  @objc deinit
}
@objc public class MoEngageInAppCampaign : MoEngageInApps.MoEngageModelObject {
  @objc final public let campaignId: Swift.String
  @objc final public let campaignName: Swift.String
  @objc final public let expiryTime: Foundation.NSDate
  @objc final public let isDraft: Swift.Bool
  @objc final public let campaignContext: [Swift.String : Any]
  @objc public init(campaignId: Swift.String, campaignName: Swift.String, expiryTime: Foundation.NSDate, isDraft: Swift.Bool, campaignContext: [Swift.String : Any])
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageSDKInApp : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageInApps.MoEngageSDKInApp
  @objc public func showInApp()
  @objc public func showInApp(forAppId appId: Swift.String? = nil)
  @objc public func showNudge(atPosition position: MoEngageInApps.MoEngageNudgePosition)
  @objc public func showNudge(atPosition position: MoEngageInApps.MoEngageNudgePosition, forAppId appId: Swift.String? = nil)
  @objc public func getNudgeView(completionBlock: @escaping MoEngageInApps.NudgeCreationCompletionBlock)
  @objc public func getNudgeView(forAppId appId: Swift.String? = nil, completionBlock: @escaping MoEngageInApps.NudgeCreationCompletionBlock)
  @objc public func nudgeCampaignShown(_ campaignInfo: MoEngageInApps.MoEngageInAppCampaign?)
  @objc public func nudgeCampaignShown(_ campaignInfo: MoEngageInApps.MoEngageInAppCampaign?, forAppId appId: Swift.String? = nil)
  @objc public func getSelfHandledInApp(completionBlock: @escaping ((_ campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign?, _ accountMeta: MoEngageCore.MoEngageAccountMeta?) -> Swift.Void))
  @objc public func getSelfHandledInApp(forAppId appId: Swift.String? = nil, completionBlock: @escaping ((_ campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign?, _ accountMeta: MoEngageCore.MoEngageAccountMeta?) -> Swift.Void))
  @objc public func selfHandledShown(campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign)
  @objc public func selfHandledShown(campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign, forAppId appId: Swift.String? = nil)
  @objc public func selfHandledClicked(campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign)
  @objc public func selfHandledClicked(campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign, forAppId appId: Swift.String? = nil)
  @objc public func selfHandledDismissed(campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign)
  @objc public func selfHandledDismissed(campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign, forAppId appId: Swift.String? = nil)
  @objc public func disableInApps()
  @objc public func disableInApps(forAppId appId: Swift.String? = nil)
  @objc public func blockInApp(forViewController viewController: UIKit.UIViewController)
  @objc public func blockInApp(forViewController viewController: UIKit.UIViewController, forAppId appId: Swift.String? = nil)
  @objc public func setCurrentInAppContexts(_ contexts: [Swift.String])
  @objc public func setCurrentInAppContexts(_ contexts: [Swift.String], forAppId appId: Swift.String? = nil)
  @objc public func invalidateInAppContexts()
  @objc public func invalidateInAppContexts(forAppId appId: Swift.String? = nil)
  @objc public func setInAppDelegate(_ delegate: MoEngageInApps.MoEngageInAppNativeDelegate)
  @objc public func setInAppDelegate(_ delegate: MoEngageInApps.MoEngageInAppNativeDelegate, forAppId appId: Swift.String? = nil)
  @objc public func resetInAppDelegate()
  @objc public func resetInAppDelegate(forAppId appId: Swift.String? = nil)
  @objc deinit
}
